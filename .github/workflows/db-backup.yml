name: Nightly DB dump to Supabase Storage

on:
  schedule:
    - cron: '0 8 * * *'   # 08:00 UTC ≈ 01:00 Mazatlán
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools (pg_dump + dig + getent + curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client dnsutils libc-bin jq

      - name: Resolve IPv4 and create dump (SSL required)
        env:
          PGHOST: ${{ secrets.PGHOST }}         # ej: db.xxxxx.supabase.co  (SIN https, SIN puerto)
          PGPORT: ${{ secrets.PGPORT }}         # 5432
          PGDATABASE: ${{ secrets.PGDATABASE }} # postgres
          PGUSER: ${{ secrets.PGUSER }}         # postgres
          PGPASSWORD: ${{ secrets.PGPASSWORD }} # reset DB password en Supabase
        run: |
          set -e

          # 0) Limpiar host por si viene con esquema/puerto
          HOST_CLEAN="$(printf '%s' "$PGHOST" | sed -E 's~^https?://~~; s~/.*$~~; s/:.*$//')"
          if [ -z "$HOST_CLEAN" ]; then
            echo "PGHOST vacío tras sanitizar"; exit 1
          fi
          echo "Host limpio: $HOST_CLEAN"

          # 1) Resolver IPv4 de forma fiable
          IPV4="$(getent ahostsv4 "$HOST_CLEAN" | awk '{print $1; exit}')"
          if [ -z "$IPV4" ]; then
            IPV4="$(dig +short A "$HOST_CLEAN" @1.1.1.1 | head -n1)"
          fi
          if [ -z "$IPV4" ]; then
            echo "No pude resolver IPv4 para $HOST_CLEAN"
            exit 1
          fi
          echo "IPv4 resuelta: $IPV4"

          # 2) Variables de conexión libpq
          export PGHOST="$HOST_CLEAN"      # nombre original (para TLS SNI)
          export PGHOSTADDR="$IPV4"        # fuerza IPv4 real
          export PGPORT="$PGPORT"
          export PGUSER="$PGUSER"
          export PGPASSWORD="$PGPASSWORD"
          export PGSSLMODE="require"

          # 3) Dump en formato personalizado
          TS=$(date -u +'%Y-%m-%dT%H-%M-%SZ')
          FILE="db_${TS}.dump"

          # Nota: NO usamos -4 (pg_dump no lo soporta). La IPv4 se fuerza con PGHOSTADDR.
          pg_dump -Fc -w --no-owner -f "$FILE" "$PGDATABASE"

          echo "FILE=$FILE" >> $GITHUB_ENV

      - name: Upload to Supabase Storage (db_dumps)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -e
          BUCKET=db_dumps
          FOLDER=$(date -u +'%Y/%m/%d')
          PATH_OBJ="$FOLDER/${{ env.FILE }}"
          curl -sS -X POST "$SUPABASE_URL/storage/v1/object/$BUCKET/$PATH_OBJ" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@${{ env.FILE }}"
          echo "✅ Subido como: $PATH_OBJ"
